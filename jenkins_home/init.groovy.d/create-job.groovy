import jenkins.model.Jenkins
import org.jenkinsci.plugins.workflow.job.WorkflowJob
import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition
import hudson.model.ParametersDefinitionProperty
import hudson.model.StringParameterDefinition
import hudson.model.BooleanParameterDefinition
import hudson.model.ChoiceParameterDefinition

def jenkins = Jenkins.instance
def jobName = 'git-documentation-pipeline'

println "üîç Checking for existing job: ${jobName}"

// Delete existing job if it exists
def existingJob = jenkins.getItem(jobName)
if (existingJob != null) {
    println "üßπ Deleting existing job..."
    existingJob.delete()
}

println "‚öôÔ∏è Creating new job: ${jobName}"

// Create the pipeline job
def job = jenkins.createProject(WorkflowJob.class, jobName)
job.setDescription('Automated CI/CD pipeline for git-documentation')

// Define parameters
def parameters = []

// 1. ENVIRONMENT - Simple choice parameter
parameters.add(new ChoiceParameterDefinition(
    'ENVIRONMENT',
    ['dev', 'qa', 'staging', 'prod'] as String[],
    'Select deployment environment'
))

// 2. SERVER - String parameter (will be populated by pipeline)
parameters.add(new StringParameterDefinition('SERVER', 'dev-server-01', 'Target server'))

// 3. CONTAINER_NAME - String parameter (will be auto-generated by pipeline)
parameters.add(new StringParameterDefinition('CONTAINER_NAME', '', 'Container name (auto-generated)'))

// 4. Other parameters
parameters.add(new StringParameterDefinition('GIT_BRANCH', 'master', 'Git branch to checkout'))
parameters.add(new StringParameterDefinition('GIT_URL', 'https://github.com/mudunuri010/git-documentation', 'Git repository URL'))
parameters.add(new BooleanParameterDefinition('FORCE_REMOVE', true, 'Force remove existing container before deploy?'))

println "üìù Adding parameters to job..."
def paramProp = new ParametersDefinitionProperty(parameters)
job.addProperty(paramProp)

// Embedded pipeline script with dynamic parameter population and FIXED PORT HANDLING
def pipelineScript = '''
pipeline {
    agent any
    
    environment {
        IMAGE_NAME_TAG = "saimudunuri9/git-documentation:${params.ENVIRONMENT}-b${BUILD_NUMBER}"
        HOST_PORT = ""
    }
    
    stages {
        stage("Setup Dynamic Parameters") {
            steps {
                script {
                    // Get server list for environment
                    def serverCmd = ["sh", "/var/jenkins_home/scripts/get_servers.sh", params.ENVIRONMENT]
                    def serverProc = serverCmd.execute()
                    serverProc.waitFor()
                    def servers = serverProc.in.text.trim().split(/\\n/)
                    
                    // Use provided SERVER or default to first server
                    env.TARGET_SERVER = params.SERVER && !params.SERVER.isEmpty() ? params.SERVER : servers[0]
                    
                    // Generate container name
                    def nameCmd = ["sh", "/var/jenkins_home/scripts/generate_container_name.sh", env.TARGET_SERVER]
                    def nameProc = nameCmd.execute()
                    nameProc.waitFor()
                    env.CONTAINER_NAME = params.CONTAINER_NAME && !params.CONTAINER_NAME.isEmpty() ? params.CONTAINER_NAME : nameProc.in.text.trim()
                    
                    // Get port with validation
                    def portCmd = ["sh", "/var/jenkins_home/scripts/get_port.sh", params.ENVIRONMENT]
                    def portProc = portCmd.execute()
                    portProc.waitFor()
                    env.HOST_PORT = portProc.in.text.trim()
                    
                    // CRITICAL FIX: Validate port and provide fallback
                    if (!env.HOST_PORT || env.HOST_PORT.isEmpty() || env.HOST_PORT == 'null') {
                        def defaultPorts = [dev: '3001', qa: '3002', staging: '3003', prod: '3004']
                        env.HOST_PORT = defaultPorts[params.ENVIRONMENT] ?: '8080'
                        echo "‚ö†Ô∏è Port script failed, using default port: ${env.HOST_PORT}"
                    }
                    
                    // Validate that we have a valid port number
                    if (!env.HOST_PORT.isInteger()) {
                        error "Invalid port value: ${env.HOST_PORT}"
                    }
                    
                    echo "=== Build Configuration ==="
                    echo "Environment:   ${params.ENVIRONMENT}"
                    echo "Server:        ${env.TARGET_SERVER}"
                    echo "Container:     ${env.CONTAINER_NAME}"
                    echo "Port:          ${env.HOST_PORT}"
                    echo "Image:         ${env.IMAGE_NAME_TAG}"
                    echo "=========================="
                }
            }
        }
        
        stage("Checkout") {
            steps {
                checkout([
                    $class: "GitSCM",
                    branches: [[name: "*/${params.GIT_BRANCH}"]],
                    userRemoteConfigs: [[url: params.GIT_URL, credentialsId: "git-credentials"]],
                    extensions: [[$class: "CleanBeforeCheckout"]]
                ])
            }
        }
        
        stage("Build Image") {
            steps {
                script {
                    echo "Building: ${env.IMAGE_NAME_TAG}"
                    docker.build(env.IMAGE_NAME_TAG, ".")
                }
            }
        }
        
        stage("Cleanup") {
            when { expression { params.FORCE_REMOVE } }
            steps {
                sh "docker stop ${env.CONTAINER_NAME} || true"
                sh "docker rm ${env.CONTAINER_NAME} || true"
            }
        }
        
        stage("Deploy") {
            steps {
                sh """
                    docker run -d \\
                        --name ${env.CONTAINER_NAME} \\
                        -p ${env.HOST_PORT}:3000 \\
                        ${env.IMAGE_NAME_TAG}
                """
            }
        }
        
        stage("Verify") {
            steps {
                sleep 5
                sh "docker ps | grep ${env.CONTAINER_NAME}"
                echo "‚úÖ Live at: http://localhost:${env.HOST_PORT}"
            }
        }
    }
    
    post {
        success {
            echo "üéâ Deployment successful!"
            echo "Access: http://localhost:${env.HOST_PORT}"
        }
        failure {
            echo "‚ùå Deployment failed!"
        }
    }
}
'''

println "üìÑ Setting pipeline definition..."
def definition = new CpsFlowDefinition(pipelineScript, true)
job.setDefinition(definition)

// Save the job
println "üíæ Saving job..."
job.save()

println "‚úÖ Job '${jobName}' created successfully!"